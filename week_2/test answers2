Добавить таблицу 'best_offer_sale' со следующими полями:
Название: `id`, тип данных: INT, возможность использования неопределенного значения: Нет, первичный ключ
Название: `name`, тип данных: VARCHAR(255), возможность использования неопределенного значения: Да
Название: `dt_start`, тип данных: DATETIME, возможность использования неопределенного значения: Нет
Название: `dt_finish`, тип данных: DATETIME, возможность использования неопределенного значения: Нет
NB! При выполнении CREATE TABLE не следует указывать название схемы.

create table if not exists best_offer_sale
(id integer primary key,
name varchar(255),
dt_start datetime not null,
dt_finish datetime not null)
Engine=InnoDB;

Удалите из таблицы 'client' поля 'code' и 'source_id'.
NB! Для удаления поля, являющегося внешним ключом, необходимо удалить ограничение внешнего ключа 
оператором 'DROP FOREIGN KEY <fk_name>', для данного задание имя первичного ключа: fk_client_source1. 
Удаление ограничения внешнего ключа и поля таблицы необходимо производить в рамках одного вызова ALTER TABLE.
B! При выполнении ALTER TABLE не следует указывать название схемы.

ALTER TABLE `client`
  DROP FOREIGN KEY fk_client_source1,
  DROP COLUMN code,
  DROP COLUMN source_id;

Удалите таблицу 'source'.
B! Для удаления таблиц необходимо использовать оператор DROP TABLE.
B! При выполнении DROP TABLE не следует указывать название схемы

DROP TABLE `source`

Добавьте в таблицу 'sale_has_good' следующие поля:
Название: `num`, тип данных: INT, возможность использования неопределенного значения: Нет
Название: `price`, тип данных: DECIMAL(18,2), возможность использования неопределенного значения: Нет
NB! При выполнении ALTER TABLE не следует указывать название схемы.

ALTER TABLE `sale_has_good`
  ADD COLUMN num INT NOT NULL,
  ADD COLUMN price DECIMAL(18,2) NOT NULL

Добавьте в таблицу 'client' поле 'source_id' тип данных: INT, возможность использования неопределенного значения:
Да. Для данного поля определите ограничение внешнего ключа как ссылку на поле 'id' таблицы 'source'.
NB! Для определения ограничения необходимо использовать оператор ADD CONSTRAINT. Определение ограничения
внешнего ключа и поля таблицы необходимо производить в рамках одного вызова ALTER TABLE. 
Пример определения внешнего ключа для существующего или добавляемого поля a_id, 
указывающего на поле id таблицы 'a':
...
ADD CONSTRAINT fk_a_id FOREIGN KEY (a_id) REFERENCES a(id)
...
NB! При выполнении ALTER TABLE не следует указывать название схемы.

ALTER TABLE `client`
  ADD COLUMN source_id INT null,
  ADD CONSTRAINT fk_source_id FOREIGN KEY (source_id) REFERENCES source(id);


class Tag(models.Model):
    title = models.CharField(max_length=250)

class NewsItem(models.Model):
models.ManyToManyField(Tag)
    title = models.CharField(max_length=250)
    date = models.DateTimeField(auto_now_add=True)
    description = models.TextField()
    tag = [определение_поля]

Представлена модель оплат пользователем покупок. У каждого пользователя может быть несколько оплат, но каждая оплата принадлежит только одному пользователю. Какой код нужно добавить вместо [1] и [2], чтобы корректно связать отношения?

class Payment(models.Model):
    date = models.DateTimeField(default=datetime.now)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    [1]

class Person(models.Model):
    user = models.OneToOneField(User, null=True)
    delivery_adress = models.TextField(blank=True)
    [2]
[1]: person = models.ForeignKey(Person) [2]: ничего


В импортированной базе магазина посмотрите план следующего запроса:
Сколько кортежей будет обработано из таблицы good?(322)DB from 5 week
select 
  name, 
    ifnull((select category.name from category 
    join category_has_good on category.id=category_has_good.category_id
        where category_has_good.good_id=good.id
        order by category.name limit 1)
  , 0) as first_category 
from good where name='F%';

Создайте B-tree индекс на поле с названием товара в отношении good.
Сколько теперь кортежей будет обработано из таблицы good?(20)
select 
  name, 
    ifnull((select category.name from category 
    join category_has_good on category.id=category_has_good.category_id
        where category_has_good.good_id=good.id
        order by category.name limit 1)
  , 0) as first_category 
from good where name like 'F%';
Операция выборки из good изменила тип. На какой? (range)
Сколько в итоге кортежей будет задействовано в выборке? 
Сложно сказать, так как есть подзапрос, выполнение которого зависит от результата основного запроса

Укажите, в каком порядке будут выполняться операции над отношениями в следующем запросе:
select number, code from sale 
join client on sale.client_id=client.id
join status on status.id=status_id
where status.id in (6, 7);
(status sale client)
